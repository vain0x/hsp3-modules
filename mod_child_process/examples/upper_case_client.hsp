// LICENSE: Unlicensed (PUBLIC DOMAIN)
// クライアントサイド

#include "hsp3utf.as"
#include "../src/mod_child_process.hsp"

#define true 1
#define false 0

	// サーバーの起動コマンド
	s_server_cmdline = "ruby upper_case_server.rb"

	// サーバーを起動する。
	gosub *l_start_server

	// ウィンドウを表示する。
	gosub *l_open_window

	repeat
		gosub *l_poll_server

		await 17
	loop

*l_error

	dialog s_error, 1
	end 1

// -----------------------------------------------
// サーバーの起動・停止・通信
// -----------------------------------------------

// サーバーを起動する。
*l_start_server

	// サブプロセス (サーバー) への標準入力を入れる変数
	s_server_stdin_data_cap = 0x1000
	sdim s_server_stdin_data, s_server_stdin_data_cap
	dim s_server_stdin_data_len

	// サブプロセス (サーバー) からの標準出力を入れる変数
	s_server_stdout_data_cap = 0x1000
	sdim s_server_stdout_data, s_server_stdout_data_cap
	dim s_server_stdout_data_len

	// サブプロセスに関するデータを入れる変数
	dim s_server_process
	child_process_prepare s_server_process

	// 標準入出力のリダイレクトを設定する。
	child_process_redirect_stdin s_server_process
	if stat == 0 {
		s_error = "ERROR: child_proecss_redirect_stdin"
		goto *l_error
	}

	child_process_redirect_stdout s_server_process
	if stat == 0 {
		s_error = "ERROR: child_process_redirect_stdout"
		goto *l_error
	}

	// サブプロセスを起動する。
	child_process_spawn s_server_process, s_server_cmdline
	if stat == 0 {
		s_error = "エラー: サブプロセスを起動できません。"
		goto *l_error
	}

	s_server_is_running = true
	logmes "サーバーが起動しました。"
	return

// サーバーを停止させる。
*l_stop_server

	assert s_server_is_running

	// EXIT を送ってサーバーを停止させる。
	// (サーバーは EXIT を受け取ったら停止するように実装されている。)
	s_server_stdin_data = "EXIT\n"
	child_process_write_stdin s_server_process, s_server_stdin_data, strlen(s_server_stdin_data)

	// サーバーの停止を3秒だけ待つ。
	s_timeout_millis = 3 * 1000
	child_process_wait s_server_process, s_timeout_millis
	if stat == 0 {
		logmes "警告: サーバーが停止しませんでした。"
	} else {
		s_server_is_running = false
		logmes "サーバーが停止しました。"
	}

	// サーバーの終了コードを確認する。(省略可)
	dim s_server_exit_code

	child_process_get_exit_code s_server_process, s_server_exit_code
	if s_server_exit_code != 0 {
		logmes "警告: サーバーの終了コードが 0 ではありません: " + s_server_exit_code
	}

	// サーバーのために確保したリソースを解放する。
	child_process_close s_server_process
	return

// サーバーからデータを受信する。
*l_poll_server

	if s_server_is_running == false {
		return
	}

	child_process_read_stdout s_server_process, s_server_stdout_data, s_server_stdout_data_cap
	s_server_stdout_data_len = stat

	if s_server_stdout_data_len < 0 {
		s_error = "エラー: サーバーからデータを受信できません。"
		goto *l_error
	}

	if s_server_stdout_data_len == 0 {
		return
	}

	// サーバーから受信したデータを使って何かする。
	gosub *l_on_response
	return

// サーバーにデータを送る。
// あらかじめ s_server_stdin_data に送るデータを入れておくこと。
*l_send_request_to_server

	child_process_write_stdin s_server_process, s_server_stdin_data, s_server_stdin_data_len
	if stat == 0 {
		s_error = "エラー: サーバーの標準入力に書き込めません。"
		goto *l_error
	}

	gosub *l_poll_server
	return

// -----------------------------------------------
// クライアントの実装
// -----------------------------------------------

// ウィンドウを表示する。
*l_open_window

	s_input_text = "hello, world"

	pos 10, 10
	input s_input_text, 200
	s_input_object_id = stat

	button gosub "大文字", *l_upper_case_request

	onexit gosub *l_on_exit
	return

// 終了時に呼ばれる。(バツボタンを押したときなど。)
*l_on_exit

	gosub *l_stop_server
	end

// サーバーからデータを受け取ったときに呼ばれる。
*l_on_response

	gosub *l_upper_case_response
	return

// 「大文字」ボタンを押したときに呼ばれる。
*l_upper_case_request

	assert s_server_is_running

	s_server_stdin_data = s_input_text + "\n"
	s_server_stdin_data_len = strlen(s_server_stdin_data)
	gosub *l_send_request_to_server
	return

// サーバーから、文字列を大文字にした結果が渡されたときに呼ばれる。
*l_upper_case_response

	logmes "応答: '" + s_server_stdout_data + "'"

	// 末尾の改行文字を取り除く。
	getstr s_server_stdout_data, s_server_stdout_data

	// 入力欄を変更する。
	objprm s_input_object_id, s_server_stdout_data
	return
