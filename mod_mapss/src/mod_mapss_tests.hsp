// テスト

#include "hsp3utf.as"
#addition "WrapCall.as"

#include "../src/mod_mapss.hsp"

#define true 1
#define false 0

	onerror gosub *l_error

	randomize
	mapss_init

	// 単純なケース
	mapss_make m
	assert mapss_length(m) == 0
	assert mapss_is_empty(m)
	assert mapss_has(m, "hello") == false

	mapss_insert m, "hello", "world"

	assert mapss_has(m, "hello")
	assert mapss_get(m, "hello") == "world"

	// 複数の要素を追加するケース
	mapss_make m
	mapss_insert m, "a", "alpha"
	mapss_insert m, "b", "bravo"
	mapss_insert m, "c", "charlie"

	assert mapss_length(m) == 3
	assert mapss_has(m, "a")
	assert mapss_get(m, "a") == "alpha"

	// insert が値を変更しないことのテスト
	mapss_make m
	mapss_insert m, "a", "alpha"
	assert stat
	mapss_insert m, "a", "aleph"
	assert stat == false
	assert mapss_get(m, "a") == "alpha"

	// set が値を変更することのテスト
	mapss_make m
	mapss_set m, "a", "alpha"
	mapss_set m, "a", "aleph"
	assert mapss_length(m) == 1
	assert mapss_get(m, "a") == "aleph"

	// バイナリセーフのテスト
	sdim binary_input
	lpoke binary_input, , 0x00abcd00
	binary_input_len = 4
	mapss_make m
	key = "binary"
	mapss_set_var m, strlen(key), key, binary_input_len, binary_input
	mapss_dup m, key, binary_output_len, binary_output
	assert stat
	assert binary_output_len == binary_input_len
	assert lpeek(binary_output) == 0x00abcd00

	// 配列要素を連想配列にできることのテスト
	mapss_make m(0)
	mapss_make m(1)
	mapss_set m(0), "a", "0"
	mapss_set m(1), "a", "1"
	assert mapss_get(m(0), "a") == "0"
	assert mapss_get(m(1), "a") == "1

	// 大きめのケースのテスト
	prefix = str(rnd(10000))
	mapss_make m
	size = 100
	repeat size
		mapss_insert m, prefix + str(cnt), str(cnt)
	loop

	assert mapss_length(m) == size
	repeat size
		assert mapss_get(m, prefix + str(cnt)) == str(cnt)
	loop

	dialog "ok"
	end

*l_error

	assert
	end
